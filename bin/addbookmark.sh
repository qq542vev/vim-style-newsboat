#!/usr/bin/env sh

### Script: addbookmark.sh
##
## Add a bookmark.
##
## Usage:
##
##   (start code)
##   addbookmark.sh [options...] URI [title] [description] [feed-title]
##   (end)
##
## Options:
##
##   -b, --{no-}bottom      - add item to the bottom.
##   -d, --{no-}duplicate   - allow duplicates.
##   -f, --file             - bookmark file.
##   -p, --{no-}purge       - remove the empty section.
##   -r, --{no-}remove      - remove the bookmarked item.
##   -t, --template         - template for bookmark.
##   -T, --section-template - template for feed-title.
##   -h, --help             - display this help and exit.
##   -v, --version          - output version information and exit.
##
## Exit Status:
##
##   0 - Program terminated normally.
##   64<= to <=78 - Program terminated abnormally. See </usr/include/sysexits.h> for the returned value.
##   129 - SIGHUP
##   130 - SIGINT
##   131 - SIGQUIT
##   143 - SIGTERM
##
## Metadata:
##
##   id - 7e6fc99c-d745-43e3-9681-19c4cac6bf21
##   author - <qq542vev at https://purl.org/meta/me/>
##   version - 2.0.2
##   date - 2022-04-12
##   since - 2021-09-09
##   copyright - Copyright (C) 2021 - 2022 qq542vev. Some rights reserved.
##   license - <CC-BY at https://creativecommons.org/licenses/by/4.0/>
##   package - vim-style-newsboat
##
## See Also:
##
##   * <Project homepage at https://github.com/qq542vev/vim-style-newsboat>
##   * <Bag report at https://github.com/qq542vev/vim-style-newsboat/issues>

set -efu
umask '0022'
IFS=$(printf ' \t\n$'); IFS="${IFS%$}"
LC_ALL='C'
PATH="${PATH-}${PATH:+:}$(command -p getconf 'PATH')"
UNIX_STD='2003' # HP-UX POSIX mode
XPG_SUS_ENV='ON' # AIX POSIX mode
XPG_UNIX98='OFF' # AIX UNIX 03 mode
POSIXLY_CORRECT='1' # GNU Coreutils POSIX mode
COMMAND_MODE='unix2003' # macOS UNIX 03 mode
export 'IFS' 'LC_ALL' 'PATH' 'UNIX_STD' 'XPG_SUS_ENV' 'XPG_UNIX98' 'POSIXLY_CORRECT' 'COMMAND_MODE'

# See also </usr/include/sysexits.h>
readonly 'EX_USAGE=64'       # command line usage error
readonly 'EX_SOFTWARE=70'    # internal software error
readonly 'EX_CANTCREAT=73'   # can't create (user) output file

trap 'endCall $(case "${?}" in [!0]*) echo "${EX_SOFTWARE}";; esac)' 0 # EXIT
trap 'endCall 129' 1 # SIGHUP
trap 'endCall 130' 2 # SIGINT
trap 'endCall 131' 3 # SIGQUIT
trap 'endCall 143' 15 # SIGTERM

endCall() {
	trap '' 0 # EXIT
	rm -fr -- ${tmpDir+"${tmpDir}"}
	exit "${1:-0}"
}

usage() {
	sed -e '/^## *(start code)/,/^## *(end)/!d' -- "${0}" | sed -e '1d; $d; s/^## */Usage: /'
	sed -e '/^### Script:/,/^## .*:$/!d' -- "${0}" | sed -e '1d; $d; s/^## *//'

	printf 'Options\n'
	sed -n -e '/^## *-.* - /s/^## *//p' -- "${0}" | awk -F ' - ' '{print "  " $1 "  " $2}'

	printf '\nExit status\n'
	sed -n -e '/^## *[0-9]\{1,\}.* - /s/^## */  /p' -- "${0}"
}

version() {
	cat <<-EOF
		$(sed -n -e 's/^### Script: //p' -- "${0}") ($(sed -n -e 's/^## *package - //p' -- "${0}")) $(sed -n -e 's/^## *version - //p' -- "${0}") (Last update: $(sed -n -e 's/^## *date - //p' -- "${0}"))
		$(sed -n -e 's/^## *copyright - //p' -- "${0}")
		$(sed -n -e 's/^## *license - /License: /p' -- "${0}")
		$(sed -n -e 's/^## *author - /Author: /p' -- "${0}")
	EOF
}

error() {
	printf '%s\n' "${1}" >&2
	endCall "${EX_USAGE}"
}

# https://qiita.com/ko1nksm/items/a22c0ce88e39c9f2dcb0

awkv_escape() {
	set -- "$1" "$2\\" ""
	while [ "$2" ]; do
		set -- "$1" "${2#*\\}" "$3${2%%\\*}\\\\"
	done
	set -- "$1" "${3%??}"
	case $2 in (@*) set -- "$1" "\\100${2#?}"; esac
	eval "$1=\$2"
}

# @getoptions
parser_definition() {
	setup REST plus:true abbr:true error:error
	flag  bottomFlag    -b --{no-}bottom    init:@no no:0
	flag  duplicateFlag -d --{no-}duplicate init:@no no:0
	param bookmarkFile  -f --file           init:'bookmarkFile="${HOME}/bookmark.html"'
	flag  purgeFlag     -p --{no-}purge     init:@no no:0
	flag  removeFlag    -r --{no-}remove    init:@no no:0
	param itemTemplate  -t --template       init:='<li><a rel="noreferrer" href="${uri}"${description:+" title=\"${description}\""}>${title}</a></li>'
	param sectionTemplate -T --section-template init:='<li>${feedTitle}<ul>${items}</ul></li>'
	disp  :usage        -h --help
	disp  :version      -v --version
}
# @end

# @gengetoptions parser -i parser_definition parse
# Generated by getoptions (BEGIN)
# URL: https://github.com/ko1nksm/getoptions (v3.3.0)
bottomFlag='0'
duplicateFlag='0'
bookmarkFile="${HOME}/bookmark.html"
purgeFlag='0'
removeFlag='0'
itemTemplate='<li><a rel="noreferrer" href="${uri}"${description:+" title=\"${description}\""}>${title}</a></li>'
sectionTemplate='<li>${feedTitle}<ul>${items}</ul></li>'
REST=''
parse() {
  OPTIND=$(($#+1))
  while OPTARG= && [ $# -gt 0 ]; do
    set -- "${1%%\=*}" "${1#*\=}" "$@"
    while [ ${#1} -gt 2 ]; do
      case $1 in (*[!a-zA-Z0-9_-]*) break; esac
      case '--bottom' in
        "$1") OPTARG=; break ;;
        $1*) OPTARG="$OPTARG --bottom"
      esac
      case '--no-bottom' in
        "$1") OPTARG=; break ;;
        $1*) OPTARG="$OPTARG --no-bottom"
      esac
      case '--duplicate' in
        "$1") OPTARG=; break ;;
        $1*) OPTARG="$OPTARG --duplicate"
      esac
      case '--no-duplicate' in
        "$1") OPTARG=; break ;;
        $1*) OPTARG="$OPTARG --no-duplicate"
      esac
      case '--file' in
        "$1") OPTARG=; break ;;
        $1*) OPTARG="$OPTARG --file"
      esac
      case '--purge' in
        "$1") OPTARG=; break ;;
        $1*) OPTARG="$OPTARG --purge"
      esac
      case '--no-purge' in
        "$1") OPTARG=; break ;;
        $1*) OPTARG="$OPTARG --no-purge"
      esac
      case '--remove' in
        "$1") OPTARG=; break ;;
        $1*) OPTARG="$OPTARG --remove"
      esac
      case '--no-remove' in
        "$1") OPTARG=; break ;;
        $1*) OPTARG="$OPTARG --no-remove"
      esac
      case '--template' in
        "$1") OPTARG=; break ;;
        $1*) OPTARG="$OPTARG --template"
      esac
      case '--section-template' in
        "$1") OPTARG=; break ;;
        $1*) OPTARG="$OPTARG --section-template"
      esac
      case '--help' in
        "$1") OPTARG=; break ;;
        $1*) OPTARG="$OPTARG --help"
      esac
      case '--version' in
        "$1") OPTARG=; break ;;
        $1*) OPTARG="$OPTARG --version"
      esac
      break
    done
    case ${OPTARG# } in
      *\ *)
        eval "set -- $OPTARG $1 $OPTARG"
        OPTIND=$((($#+1)/2)) OPTARG=$1; shift
        while [ $# -gt "$OPTIND" ]; do OPTARG="$OPTARG, $1"; shift; done
        set "Ambiguous option: $1 (could be $OPTARG)" ambiguous "$@"
        error "$@" >&2 || exit $?
        echo "$1" >&2
        exit 1 ;;
      ?*)
        [ "$2" = "$3" ] || OPTARG="$OPTARG=$2"
        shift 3; eval 'set -- "${OPTARG# }"' ${1+'"$@"'}; OPTARG= ;;
      *) shift 2
    esac
    case $1 in
      --?*=*) OPTARG=$1; shift
        eval 'set -- "${OPTARG%%\=*}" "${OPTARG#*\=}"' ${1+'"$@"'}
        ;;
      --no-*|--without-*) unset OPTARG ;;
      -[ftT]?*) OPTARG=$1; shift
        eval 'set -- "${OPTARG%"${OPTARG#??}"}" "${OPTARG#??}"' ${1+'"$@"'}
        ;;
      -[bdprhv]?*) OPTARG=$1; shift
        eval 'set -- "${OPTARG%"${OPTARG#??}"}" -"${OPTARG#??}"' ${1+'"$@"'}
        OPTARG= ;;
      +*) unset OPTARG ;;
    esac
    case $1 in
      '-b'|'--bottom'|'--no-bottom')
        [ "${OPTARG:-}" ] && OPTARG=${OPTARG#*\=} && set "noarg" "$1" && break
        eval '[ ${OPTARG+x} ] &&:' && OPTARG='1' || OPTARG='0'
        bottomFlag="$OPTARG"
        ;;
      '-d'|'--duplicate'|'--no-duplicate')
        [ "${OPTARG:-}" ] && OPTARG=${OPTARG#*\=} && set "noarg" "$1" && break
        eval '[ ${OPTARG+x} ] &&:' && OPTARG='1' || OPTARG='0'
        duplicateFlag="$OPTARG"
        ;;
      '-f'|'--file')
        [ $# -le 1 ] && set "required" "$1" && break
        OPTARG=$2
        bookmarkFile="$OPTARG"
        shift ;;
      '-p'|'--purge'|'--no-purge')
        [ "${OPTARG:-}" ] && OPTARG=${OPTARG#*\=} && set "noarg" "$1" && break
        eval '[ ${OPTARG+x} ] &&:' && OPTARG='1' || OPTARG='0'
        purgeFlag="$OPTARG"
        ;;
      '-r'|'--remove'|'--no-remove')
        [ "${OPTARG:-}" ] && OPTARG=${OPTARG#*\=} && set "noarg" "$1" && break
        eval '[ ${OPTARG+x} ] &&:' && OPTARG='1' || OPTARG='0'
        removeFlag="$OPTARG"
        ;;
      '-t'|'--template')
        [ $# -le 1 ] && set "required" "$1" && break
        OPTARG=$2
        itemTemplate="$OPTARG"
        shift ;;
      '-T'|'--section-template')
        [ $# -le 1 ] && set "required" "$1" && break
        OPTARG=$2
        sectionTemplate="$OPTARG"
        shift ;;
      '-h'|'--help')
        usage
        exit 0 ;;
      '-v'|'--version')
        version
        exit 0 ;;
      --)
        shift
        while [ $# -gt 0 ]; do
          REST="${REST} \"\${$(($OPTIND-$#))}\""
          shift
        done
        break ;;
      [-+]?*) set "unknown" "$1"; break ;;
      *)
        REST="${REST} \"\${$(($OPTIND-$#))}\""
    esac
    shift
  done
  [ $# -eq 0 ] && { OPTIND=1; unset OPTARG; return 0; }
  case $1 in
    unknown) set "Unrecognized option: $2" "$@" ;;
    noarg) set "Does not allow an argument: $2" "$@" ;;
    required) set "Requires an argument: $2" "$@" ;;
    pattern:*) set "Does not match the pattern (${1#*:}): $2" "$@" ;;
    notcmd) set "Not a command: $2" "$@" ;;
    *) set "Validation error ($1): $2" "$@"
  esac
  error "$@" >&2 || exit $?
  echo "$1" >&2
  exit 1
}
# Generated by getoptions (END)
# @end

parse ${@+"${@}"}
eval "set -- ${REST}"

case "${#}" in
	'0') error 'Requires an argument: URI';;
esac

if [ -d "${bookmarkFile}" ]; then
	printf "'%s' is directory.\\n" "${bookmarkFile}" >&2
	endCall "${EX_CANTCREAT}"
fi

htmlTemplate=$(
	cat <<-'EOF'
	<!DOCTYPE html>
	<html
		xmlns="http://www.w3.org/1999/xhtml"
		lang=""
		xml:lang=""
		about=""
		typeof="foaf:Document"
	>
		<head>
			<meta charset="UTF-8" />
			<meta name="generator" content="addbookmark.sh" />
			<meta name="referrer" content="no-referrer" />
			<meta name="robots" content="noindex,nofollow,noarchive" />
			<title property="dcterms:title">Bookmark</title>
			<link rel="profile" href="http://microformats.org/profile/xoxo" />
		</head>
		<body>
			<main id="main" rel="schema:mainContentOfPage" resource="#main">
				<!-- Do not delete the "*** ~~~ ***" comment. -->
				<ul class="xoxo">
				<!-- *** BEGIN-BOOKMARK-SECTION *** -->
				<!-- *** END-BOOKMARK-SECTION *** -->
				</ul>
			</main>
		</body>
	</html>
	EOF
)

awkScript=$(
	cat <<-'EOF'
	BEGIN {
		RS = "\003"

		escapedUri = htmlEscape(uri)
		escapedTitle = htmlEscape(title)
		escapedDescription = htmlEscape(description)
		escapedFeedTitle = htmlEscape(feedTitle)

		beginBookmarkSymbol = "<!-- *** BEGIN-BOOKMARK-SECTION *** -->"
		endBookmarkSymbol = "<!-- *** END-BOOKMARK-SECTION *** -->"
		beginSectionSymbol = sprintf("<!-- *** BEGIN-SECTION: \"%s\" *** -->", hyphenEscape(escapedFeedTitle))
		endSectionSymbol = "<!-- *** END-SECTION *** -->"
		beginListSymbol = "<!-- *** BEGIN-LIST *** -->"
		endListSymbol = "<!-- *** END-LIST *** -->"
		beginItemSymbol = sprintf("<!-- *** BEGIN-ITEM: \"%s\" *** -->", hyphenEscape(escapedUri))
		endItemSymbol = "<!-- *** END-ITEM *** -->"

		sprintf("uri='%s'; title='%s'; description='%s'; feedTitle='%s'; rowUri='%s'; rowTitle='%s'; rowDescription='%s'; rowFeedTitle='%s'; cat <<%s\n%s\n%s", escapedUri, escapedTitle, escapedDescription, escapedFeedTitle, uri, title, description, feedTitle, RS, itemTemplate, RS) | getline item

		item = beginItemSymbol substr(item, 1, length(item) - 1) endItemSymbol
	}

	function htmlEscape(string) {
		gsub(/&/, "\\&amp;", string)
		gsub(/</, "\\&lt;", string)
		gsub(/>/, "\\&gt;", string)
		gsub(/"/, "\\&quot;", string)
		gsub(/'/, "\\&#39;", string)

		return string
	}

	function hyphenEscape(string) {
		gsub(/-/, "\\&#45;", string)

		return string
	}

	function regexpEscspe(string) {
		gsub(/[$(){}\[\]|*+?]/, "\\\\&", string)

		return string
	}

	function fsub(string, replacement, target) {
		string = regexpEscspe(string)
		gsub(/&/, "\\\\&", replacement)
		sub(string, replacement, target)

		return target
	}

	{
		html = $0
	}

	removeFlag || !duplicateFlag {
		while(start = index(html, beginItemSymbol)) {
			html = substr(html, 1, start - 1) substr(html, start - 1 + index(substr(html, start), endItemSymbol) + length(endItemSymbol))
		}
	}

	!index(html, beginSectionSymbol) {
		sprintf("feedTitle='%s'; rowFeedTitle='%s'; items='%s'; cat <<%s\n%s\n%s", escapedFeedTitle, feedTitle, beginListSymbol endListSymbol, RS, sectionTemplate, RS) | getline section

		section = beginSectionSymbol substr(section, 1, length(section) - 1) endSectionSymbol

		if(bottomFlag) {
			html = fsub(endBookmarkSymbol, section endBookmarkSymbol, html)
		} else {
			html = fsub(beginBookmarkSymbol, beginBookmarkSymbol section, html)
		}
	}

	!removeFlag {
		start = index(html, beginSectionSymbol)
		len = length(beginSectionSymbol)
		end = start + len + index(substr(html, start + len), endSectionSymbol) + length(endSectionSymbol) - 1
		section = substr(html, start, end - start)

		html = \
			substr(html, 1, start - 1) \
			(bottomFlag ? \
				fsub(endListSymbol, item endListSymbol, section) : \
				fsub(beginListSymbol, beginListSymbol item, section) \
			) \
			substr(html, end)
	}

	purgeFlag {
		tmpHtml = ""

		while(match(html, /<!-- \*\*\* BEGIN-SECTION: "[^<]*" \*\*\* -->/)) {
			start = RSTART
			end = start + RLENGTH + index(substr(html, start + RLENGTH), endSectionSymbol) + length(endSectionSymbol) - 1
			section = substr(html, start, end - start)

			tmpHtml = tmpHtml \
				substr(html, 1, start - 1) \
				(match(section, regexpEscspe(beginListSymbol) "[\t\n\v\r ]*" regexpEscspe(endListSymbol)) ? \
					"" : \
					substr(html, start, end - start) \
				)
			html = substr(html, end)
		}

		html = tmpHtml html
	}

	END {
		printf("%s", html)
	}
	EOF
)

tmpDir=$(mktemp -d)
tmpFile="${tmpDir}/file"

if [ '!' -e "${bookmarkFile}" ]; then
	bookmarkDir=$(dirname -- "${bookmarkFile}"; printf '$')
	mkdir -p -- "${bookmarkDir%?$}"

	: >"${bookmarkFile}"
fi

if [ '!' -s "${bookmarkFile}" ]; then
	printf '%s' "${htmlTemplate}" >"${bookmarkFile}"
fi

awkv_escape 'uri' "${1}"
awkv_escape 'title' "${2:-${1}}"
awkv_escape 'description' "${3-}"
awkv_escape 'feedTitle' "${4:-Unsorted Bookmarks}"
awkv_escape 'itemTemplate' "${itemTemplate}"
awkv_escape 'sectionTemplate' "${sectionTemplate}"

awk \
	-v "uri=${uri}" \
	-v "title=${title}"  \
	-v "description=${description}" \
	-v "feedTitle=${feedTitle}" \
	-v "bottomFlag=${bottomFlag}" \
	-v "duplicateFlag=${duplicateFlag}" \
	-v "purgeFlag=${purgeFlag}" \
	-v "removeFlag=${removeFlag}" \
	-v "itemTemplate=${itemTemplate}" \
	-v "sectionTemplate=${sectionTemplate}" \
	-- "${awkScript}" "${bookmarkFile}" \
	>"${tmpFile}"

cat -- "${tmpFile}" >"${bookmarkFile}"
